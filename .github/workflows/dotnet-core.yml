name: "Semantic tag release"

on:
  push:
    branches:
      - master
      - pre/rc
      - develop
      - feature/**
      - hotfix/**
      - release/**
jobs:
  semantic-version:
    name: "Calculate Semantic version"
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.semantic.outputs.new_release_published }}
      output2: ${{ steps.semantic.outputs.new_release_version }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v1     
      - name: Set Git env
        uses: allenevans/set-env@v1.0.0
        with:
          overwrite: true
          GITHUB_TOKEN: ${{secrets.GIT_ARTIFACT_TOKEN}}
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: 12
        env:
          CI: true
      - name: Install dependencies
        run: npm ci --unsafe-perm 
      - name: check
        run: ls
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic 
      - name: Do something when a new release published
        #if: publish.steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo "::set-output  name=isPublished::${{ steps.semantic.outputs.new_release_published }}
          echo "::set-output  name=newReleaseVersion::${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_version }}         
  release:
    name: "Publish to Github Package Registry"
    needs: [semantic-version]
    if:  ${{ needs.semantic-version.outputs.output1 == 'true' }} 
    runs-on: ubuntu-latest #windows-latest
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true     
      GITHUB_TOKEN: ${{secrets.GIT_ARTIFACT_TOKEN}}
      AZURE_ARTIFACTS_PAT: ${{secrets.AZURE_ARTIFACTS_PAT}}
      NUGET_VERSION: ${{ needs.semantic-version.outputs.output2 }}
    services:
      mssql:      
        image: mcr.microsoft.com/mssql/server:2019-latest       
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: MyPassword!
        ports:
          - 1433:1433
        options: >-
          --name=mssql
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'MyPassword!' -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 10
          --health-start-period 10s
    steps:
      - run: echo ${{needs.semantic-version.outputs.output1}} ${{needs.semantic-version.outputs.output2}} 
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.x
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.2      
     # - name: Set nuget source
     #   run: nuget sources add -name "AzureDevOpsArtifacts" -source "https://pkgs.dev.azure.com/SiarheiLinkevich/50d6e80a-d6b1-461f-b2ba-aa07e2362100/_packaging/BoardGamesArtifacts/nuget/v3/index.json" -username PATForPackages -password ${{secrets.AZURE_ARTIFACTS_PAT}}
      - name: Update nuget sources
        # run: dotnet nuget update source BoardGamesArtifacts -u 'Siarhei Linkevich' --store-password-in-clear-text -p ${{secrets.AZURE_ARTIFACTS_PAT}}      
        run: dotnet nuget update source nuget.org -u 'mrTaler' --store-password-in-clear-text -p ${{secrets.NUGET_ARTIFACTS}}   
      - name: Create MS SQL Database
        run: docker exec -i mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'MyPassword!' -Q 'CREATE DATABASE Test'
      - name: Install dependencies
        run: |
          dotnet restore 
          dotnet tool restore
      - name: Echo version
        run: echo $env:NUGET_VERSION
      - name: Build
        run: dotnet build  --configuration Release --no-restore /p:Version=${{needs.semantic-version.outputs.output2}}
      - name: Test
        env:
          mssql: "Data Source=localhost,1433;Initial Catalog=Test;User=sa;Password=MyPassword!;"          
        run: dotnet test --configuration Release --no-build --nologo --verbosity normal --collect:"XPlat Code Coverage"
      - uses: codecov/codecov-action@v1  
      #- name: Publish windows version        
      #  run: dotnet nuget push $GITHUB_WORKSPACE/Nugets/RolePlayedGamesHelper* --source "BoardGamesArtifacts" --api-key whatever --skip-duplicate
      - name: 'Dotnet NuGet Push'
      #  run: |
      #    Get-ChildItem $GITHUB_WORKSPACE/Nugets/ -Filter *.nupkg |
      #    Where-Object { $_.Name.Contains('RolePlayedGamesHelper') } |
      #    ForEach-Object { dotnet nuget push $_ --source "BoardGamesArtifacts" --api-key whatever --skip-duplicate }          
      #  run: find $GITHUB_WORKSPACE/Nugets/ -type f -name 'RolePlayedGamesHelper.*.nupkg' | while read FILE ; do | dotnet nuget push ${FILE} --source "BoardGamesArtifacts" --api-key whatever --skip-duplicate done
        run: dotnet nuget push "**/RolePlayedGamesHelper.*.nupkg" --source "nuget.org" --api-key whatever --skip-duplicate **/*.nupkg 
          #   dotnet nuget push AppLogger.1.0.0.nupkg            --api-key qz2jga8pl3dvn2akksyquwcs9ygggg4exypy3bhxy6w6x6 --source https://api.nuget.org/v3/index.json
      - uses: actions/upload-artifact@v2
        with:
          path: Nugets/*
